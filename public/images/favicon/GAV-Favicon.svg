<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 370 228" style="enable-background:new 0 0 370 228;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#ED1C24;}
	.st1{fill:#EBEBEC;}
	.st2{display:none;fill:#FFFFFF;}
</style>
<script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //
	]]>
}
          )();</script>
<path class="st0" d="M0.5,114.5c0-0.8,0-1.5,0.2-2.6c0.9-5.2,1.1-10.3,2.5-15c4.6-15.7,15.2-26.5,29.4-34c12.1-6.4,25.3-9,38.9-9.2
	c19.7-0.3,39.5-0.1,59.2-0.1c27.3,0,54.5,0,81.8,0.1c1.2,0,2.9,0.6,3.6,1.5c6.3,8.8,12.4,17.8,18.5,26.9c-0.2,0.7-0.3,1.2-0.6,1.6
	c-7,10-14.1,20-21.2,29.9c-0.4,0.5-1,0.9-1.6,1.1c-6.3-9.1-12.5-17.9-18.6-26.9c-1.1-1.7-2.2-2.2-4.1-2.2c-36.7,0-73.3,0-110,0.1
	c-3.2,0-6.4,0.3-9.7,0.5c-9.6,0.8-17.9,4.4-24.2,12c-10.9,13.2-7.1,31.4,7.8,40.1c7.1,4.1,14.9,5.4,23,5.5c13.7,0.1,27.3,0,41,0
	c1,0,1.9,0,2.8,0c0-6,0-11.6,0-17.5c-20.9,0-41.5,0-62.6,0c1.4-1.7,2.4-3.1,3.5-4.4c5.1-6.2,10.3-12.5,15.5-18.7
	c2-2.5,4.1-4.1,7.9-4c23.4,0.3,46.9,0.1,70.3,0.1c1,0,1.9,0,2.8,0c0,25.6,0,50.8,0,76.1c-1.2,0-2.2,0-3.2,0
	c-26.7,0-53.4,0.1-80.1-0.1c-6.6-0.1-13.4-0.8-19.8-2.2c-15.3-3.4-28.9-10.2-39.2-22.6c-8.3-9.9-13.2-21-13.4-34.1
	C1.1,115.8,0.7,115.2,0.5,114.5z"/>
<path class="st1" d="M169.2,176.5c0.7-1.8,1.6-3.7,2.8-5.3c13-18.4,26.1-36.8,39.1-55.3c0.1-0.1,0.1-0.3,0.2-0.7
	c0.6-0.6,1.2-0.9,1.6-1.5c7.1-10,14.1-19.9,21.2-29.9c0.3-0.4,0.4-1,0.7-1.7c3.8-5.4,7.4-10.5,11.3-15.5c4.4-5.7,9.4-10.7,16.6-12.7
	c0.7-0.2,1.3-0.8,1.9-1.2c4,0,8,0,12.3,0.2c0.6,0.4,0.8,0.7,1.1,0.8c6.8,1.8,11.7,6.2,15.8,11.6c4,5.3,7.7,10.8,11.6,16.4
	c-0.3,0.9-0.6,1.7-1,2.3c-6.9,9.7-13.7,19.5-20.6,29.1c-0.4,0.6-1.2,1-1.8,1.3c-4-6-7.9-11.8-12.1-18c-4.5,6.5-8.7,12.5-13,18.5
	c-4.4,6-8.7,11.9-12.9,17.9c-3.4,4.8-6.6,9.6-10,14.6c-5.3,7.4-10.5,14.7-15.6,22.1c-1.6,2.3-2.8,4.7-4.2,7.1
	C199.2,176.5,184.3,176.5,169.2,176.5z"/>
<path class="st0" d="M282,114.6c0.6-0.5,1.3-0.9,1.7-1.5c6.9-9.7,13.8-19.4,20.6-29.1c0.4-0.6,0.7-1.4,1.2-2.4
	c6.9-9.8,13.7-19.4,20.4-29c14.1,0,28.3,0,42.4,0c0.7,0,1.4,0.3,2,0.8c-0.6,0.9-1,1.5-1.4,2.1c-8.1,11.4-16.3,22.8-24.4,34.2
	c-5.7,8-11.4,16.1-17.2,24.2c-0.4,0.3-0.7,0.5-0.9,0.8c-7.2,10.1-14.4,20.2-21.5,30.4c-0.4,0.5-0.5,1.3-0.9,2
	c-3.8,5.4-7.3,10.7-11.2,15.9c-3.3,4.4-7.3,8.3-12.4,10.6c-2.9,1.4-6.2,1.9-9.4,2.8c-1.5,0-2.9,0-4.7-0.2
	c-7.2-0.2-13.1-3.1-17.3-8.2c-5.5-6.6-10.1-13.9-15.1-20.9c3.3-4.8,6.6-9.7,9.9-14.4c4.2-6,8.5-11.9,13-17.7
	c4.3,5.9,8.2,11.6,12.4,17.7C273.7,126.5,277.9,120.6,282,114.6z"/>
<path class="st1" d="M327.4,114c7.9,11.1,15.7,22.3,23.4,33.5c6,8.7,12,17.3,18,26c0.3,0.5,0.9,0.9,1.5,1.4c0.2,0.6,0.2,1.1,0.2,1.7
	c-15.4,0-30.8,0-46.5-0.2c-1-1.3-1.6-2.4-2.3-3.4c-5.8-8.6-11.7-17.2-17.5-25.8c0.2-0.7,0.3-1.4,0.7-1.9
	c7.1-10.1,14.3-20.3,21.5-30.4C326.7,114.5,327,114.3,327.4,114z"/>
<path class="st2" d="M304.1,147.2c6,8.5,11.9,17.1,17.7,25.7c0.7,1,1.3,2.1,2,3.4c-17.4,0.2-34.8,0.2-52.4,0.2
	c2.9-0.9,6.2-1.5,9.1-2.8c5.1-2.3,9.1-6.2,12.4-10.6C296.7,157.9,300.2,152.5,304.1,147.2z"/>
<path class="st2" d="M325.7,52.6c-6.5,9.6-13.2,19.1-20.2,28.8c-4-5.3-7.8-10.8-11.8-16.1c-4.1-5.4-9-9.8-15.8-11.6
	c-0.3-0.1-0.5-0.4-0.9-0.8C293.2,52.6,309.4,52.6,325.7,52.6z"/>
<path class="st2" d="M233.9,147.3c5.1,6.9,9.7,14.2,15.2,20.8c4.2,5.1,10,8,17,8.2c-17.1,0.2-34.3,0.2-51.8,0.2
	c1.2-2.4,2.4-4.9,4-7.1C223.4,162,228.6,154.7,233.9,147.3z"/>
<path class="st2" d="M281.9,114.4c-4.1,6.1-8.2,12.1-12.6,18.3c-4.2-6.1-8.1-11.9-12.2-17.8c4-6.1,8.1-12.1,12.7-18.6
	C274,102.6,277.9,108.4,281.9,114.4z"/>
</svg>
